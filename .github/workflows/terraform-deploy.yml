# terraform-deploy.yml
name: "Terraform-Destroy-Create-Deploy"

on:
  workflow_dispatch:
  push:
    branches: ["develop"]

jobs:
  destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest

    env:
      S3_STATE_BUCKET_NAME: tw-spring-nginx-tfstate
      working-directory: ./terraform

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # terraform에서 사용하는 USER의 키를 입력합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_TERRAFORM_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TERRAFORM_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: AWS Plan Copy
        run: aws s3 cp --region ap-northeast-2 s3://$S3_STATE_BUCKET_NAME/terraform.tfstate terraform.tfstate
        continue-on-error: true
        id: copy
        working-directory: ${{ env.working-directory }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        id: setup
        if: steps.copy.outcome == 'success'
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        if: steps.setup.outcome == 'success'
        run: terraform init
        working-directory: ${{ env.working-directory }}

      - name: Show Destroy plan
        id: plan
        if: steps.init.outcome == 'success'
        run: terraform plan -destroy
        working-directory: ${{ env.working-directory }}

      - name: Destroy resources jobs
        if: steps.plan.outcome == 'success'
        id: destroy
        run: terraform destroy -auto-approve
        working-directory: ${{ env.working-directory }}

  create:
    needs: destroy
    name: "Terraform Create"
    runs-on: ubuntu-latest

    env:
      working-directory: ./terraform
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # terraform에서 사용하는 USER의 키를 입력합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_TERRAFORM_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TERRAFORM_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.working-directory }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: ${{ env.working-directory }}
        env:
          TF_LOG: info

        # On push to "develop", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        working-directory: ${{ env.working-directory }}
        run: terraform apply -auto-approve -input=false

  buildAndDeploy:
    needs: create
    name: "Build And Deploy Spring Application"
    runs-on: ubuntu-latest

    env:
      S3_BUCKET_NAME: tw-spring-bucket
      PROJECT_NAME: spring
      DEPLOY_APPLICATION: spring-deploy
      DEPLOY_GROUP_NAME: terraform-develop

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew build
        shell: bash

      - name: Make zip file
        run: zip -r ./spring.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          #S3와 CODEDEPLOY권한이 있는 유저가 합니다.
          aws-access-key-id: ${{ secrets.AWS_S3_CODEDEPLOY_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_S3_CODEDEPLOY_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./spring.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/spring.zip

      - name: Code Deploy
        run: aws deploy create-deployment --application-name $DEPLOY_APPLICATION --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name $DEPLOY_GROUP_NAME --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/spring.zip
